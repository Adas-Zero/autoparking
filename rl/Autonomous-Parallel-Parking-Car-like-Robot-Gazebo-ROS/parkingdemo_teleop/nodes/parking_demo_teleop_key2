#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Float64
import sys, select, os
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios


# Robot Status  
#STOP = 0
#FORWARD = 1
#FORWARD_RIGHT = 2
#FORWARD_LEFT = 3
#BACKWARD = 4
#BACKWARD_RIGHT = 5
#BACKWARD_LEFT = 6

# Control Status
STOP = 0
FORWARD = 1
BACKWARD = 2
RIGHT = 3
LEFT = 4

# Control Constant
MAX_VEL = 0.015
TH_VEL = 0.001
MAX_STEER = 0.3
POWER_AC = 500
CONTROL_AC = 50
 

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x

w/s : increase/decrease REAR Wheel_effort 
a/d : increase/decrease FRONT Steer 

space key, X : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    if os.name == 'nt':
      return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key


def check_State(status,vel,steer):
    pass

def control(status, vel, steer):

    next_wheel_effort = 0
    next_steer = steer

    if status == STOP:
	pass

    elif status == FORWARD:
        if vel - MAX_VEL > TH_VEL:
	  next_wheel_effort = -CONTROL_AC
	else:
	  next_wheel_effot = vel/MAX_VEL * POWER_AC 
   	
    elif status == BACKWARD:
        if vel - MAX_VEL > TH_VEL:
	  next_wheel_effort = CONTROL_AC
	else:
	  next_wheel_effot = -vel/MAX_VEL * POWER_AC 

    elif status == RIGHT:
	next_steer = MAX_STEER

    elif status == LEFT:
	next_steer = -MAX_STEER 
    
    return next_steer, next_wheel_effort

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('parking_demo_teleop')


    fr_pub = rospy.Publisher('parkingdemo/fr_Steer_position_controller/command', Float64, queue_size=10)
    fl_pub = rospy.Publisher('parkingdemo/fl_Steer_position_controller/command', Float64, queue_size=10)
    rr_pub = rospy.Publisher('parkingdemo/rr_Wheel_effort_controller/command', Float64, queue_size=10)
    rl_pub = rospy.Publisher('parkingdemo/rl_Wheel_effort_controller/command', Float64, queue_size=10)


    #turtlebot3_model = rospy.get_param("model", "burger")

    # status = 0 ~ stop  ,  status = 1 ~ run
    status = 0
    step = 0
    steer = 0
    wheel_effort = 0
    vel = 0

   # status
    try:
        print(msg)
        while(1):
            key = getKey()
            if key == 'w' :
                status = FORWARD
                print("Wheel_effort : {} , Steer : {} ".format(wheel_effort, steer))
            elif key == 'a' :
                status = LEFT
                print("Wheel_effort : {} , Steer : {} ".format(wheel_effort, steer))
            elif key == 'd' :
                status = RIGHT
                print("Wheel_effort : {} , Steer : {} ".format(wheel_effort, steer))
            elif key == 's' :
                status = BACKWARD
                print("Wheel_effort : {} , Steer : {} ".format(wheel_effort, steer))
            elif key == ' ' or key == 'x' :
                steer = 0
                wheel_effort = 0
                status += 1
                print("Stop!!!!!!!!!")
                # what is this
                # else:
                if (key == '\x03'):
                    break
                else:
                    status = STOP
                    # constant time , inform
            if step == 20 :
                print(msg)
                step = 0

            wheel_effort,steer = control(status, vel, steer)
            # publish ros topic
            fr_pub.publish(steer)
            fl_pub.publish(steer)
            rr_pub.publish(wheel_effort)
            rl_pub.publish(wheel_effort)
    except:
        print(e)

    finally:
        print("final")

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
